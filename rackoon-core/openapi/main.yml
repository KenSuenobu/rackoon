openapi: "3.0.0"
info:
  version: 1.0.0
  title: Open Data Center Service
  contact:
    name: Ken Suenobu
    url: https://www.google.com/
    email: ksuenobu@fastmail.com
  description: None
  license:
    name: Apache License 2.0
servers:
  - url: http://localhost:8080
tags:
  - name: Owners
    description: Handles the manipulation of Data Center owner objects.  Owners are entities to which `Rack`s are associated.
  - name: Racks
    description: Handles the manipulation of `Rack`s with `Owner`s.
  - name: RackAssets
    description: Handles the manipulation of `RackAsset` objects against `Rack`s.
  - name: RackAssetServices
    description: Handles the manipulation of `RackAssetService` objects against `RackAsset` objects.
paths:
  /owner/create:
    post:
      tags:
        - Owners
      description: Creates a new `Owner` object
      operationId: createOwner
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Owner"
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
  /owner/{name}/get:
    get:
      tags:
        - Owners
      description: Retrieves an `Owner` by its ID
      operationId: getOwnerByName
      parameters:
        - name: name
          in: path
          description: Owner Name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Owner"
  /owner/list:
    get:
      tags:
        - Owners
      description: Retrieves a list of all of the registered `Owner`s
      operationId: listOwners
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Owner"
  /rack/create:
    post:
      tags:
        - Racks
      description: Creates a new Rack` object
      operationId: createRack
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Rack"
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
        "404":
          description: Not Found
  /rack/{name}/delete:
    delete:
      tags:
        - Racks
      description: Deletes a rack
      operationId: deleteRack
      parameters:
        - name: name
          in: path
          description: Owner Name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /rack/{name}/list:
    get:
      tags:
        - Racks
      description: Retrieves a list of all of the registered `Rack`s for an `Owner`
      operationId: listRacksByOwner
      parameters:
        - name: name
          in: path
          description: Owner Name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Rack"
  /asset/create:
    post:
      tags:
        - RackAssets
      description: Assigns equipment to a `Rack`
      operationId: createAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RackAsset"
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
  /asset/{name}/list:
    get:
      tags:
        - RackAssets
      description: Lists all of the `RackAsset` objects assigned to a `Rack`
      operationId: listEquipmentByRackName
      parameters:
        - name: name
          in: path
          description: Rack Name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RackAsset"
  /asset/{name}/delete:
    delete:
      tags:
        - RackAssets
      description: Removes a `RackAsset` from its assigned `Rack`, deleting the equipment
      operationId: deleteEquipmentByName
      parameters:
        - name: name
          in: path
          description: Rack Name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /service/create:
    post:
      tags:
        - RackAssetServices
      description: Assigns a `RackAssetService` to a `RackAsset`
      operationId: createService
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RackAssetService"
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
  /service/{name}/list:
    get:
      tags:
        - RackAssetServices
      description: Retrieves a list of `RackAssetService` objects for a `RackAsset` object by its name
      operationId: listServicesByName
      parameters:
        - name: name
          in: path
          description: Rack Equipment Name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RackAssetService"
  /service/{name}/delete:
    delete:
      tags:
        - RackAssetServices
      description: Removes a `RackAssetService` from its assigned `RackAsset`, deleting the service
      operationId: deleteServiceByName
      parameters:
        - name: name
          in: path
          description: Rack Equipment Name
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
  /member/create:
    post:
      tags:
        - Members
      description: Create a new member
      operationId: createMember
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Member"
      responses:
        "201":
          description: Created
        "401":
          description: Unauthorized
  /member/login:
    post:
      tags:
        - Members
      description: Logs a member into the system
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Created
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Unauthorized
        "404":
          description: Not Found
components:
  schemas:
    Member:
      $ref: "./dto/Member.yml"
    Owner:
      $ref: "./dto/Owner.yml"
    Rack:
      $ref: "./dto/Rack.yml"
    RackAsset:
      $ref: "./dto/RackAsset.yml"
    RackAssetService:
      $ref: "./dto/RackAssetService.yml"
